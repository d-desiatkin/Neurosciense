# -*- coding: utf-8 -*-
"""recurrence_matri.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vwK4wGjolrTOjvbDQ0b9JU4SnrLOwYjt
"""



from pyunicorn.timeseries import RecurrencePlot
import os
import numpy as np
from tqdm import tqdm
import pandas as pd
import scipy.sparse as sparse

path = '/content/filters/'
path1 = '/content/filters1/' 
import csv
list1 = os.listdir(path)
import time

names = [2]

df = pd.read_csv("/content/filters/Participant1_Backgr_int_0.1_type_0.4filter_alpha.csv")

df['0'][0:int(len(df)/6)]

for i in list1:
  if (int(i[11]) in names) :
    
    if not(os.path.exists(path1 + i[11])):
      os.mkdir(path1 + i[11])
    if (list1[0][46] == 't'):
      dop = 'betta'
    if (list1[0][46] == 'h'):
      dop = 'alpha'
    if not(os.path.exists(path1 + i[11] + '/' + dop + '/')):
      os.mkdir(path1 + i[11] + '/' + dop + '/')
    if not(os.path.exists(path1 + i[11] + '/' + dop + '/' + i[24:27] + '/')):
      os.mkdir(path1 + i[11] + '/' + dop + '/' + i[24:27] + '/')
    mainpath = path1 + i[11] + '/' + dop + '/' + i[24:27] + '/'
    print('The folder is {}'.format(mainpath))
    df = pd.read_csv(path+i)
    df = df.drop(columns = 'Unnamed: 0' )
    df1 = pd.DataFrame()
    for j in df.columns:
      if (int(j) <= 31):
        print('Column number {}'.format(j))
        rpx = RecurrencePlot(np.array(df[j][0:int(len(df)/6)]),threshold_std=0.03)
        rpx = rpx.recurrence_matrix()
        np.save(mainpath + j +'_RM_' + i[0:len(i)-3] + 'npy' , rpx)

df = pd.read_csv('/content/filters/Participant1_Backgr_int_0.1_type_0.4filter_alpha.csv')

data2=np.load('temp.npy')

list1[5][45]

df = np.load("/content/filters1/3/alpha/0.1/0_RM_Participant3_Backgr_int_0.1_type_0.4filter_alpha.npy")

df1 = df = np.load("/content/filters1/3/alpha/0.1/1_RM_Participant3_Backgr_int_0.1_type_0.4filter_alpha.npy")

/content/filters1/3/alpha/0.1/0_RM_Participant3_Backgr_int_0.1_type_0.4filter_alpha.npy

RMD = np.mean(df*df1)/(np.mean(df)*np.mean(df1))

name = "0_RM_Participant3_Backgr_int_0.1_type_0.4filter_betta.npy"

name[-9:-4]

def RMD1(x,y):
  n = len(x)
  RMD = np.log2(np.mean(df*df1)/(n*np.mean(df)*np.mean(df1)))
  return RMD

path1 = "/content/filters1/"
names = os.listdir(path)
intensity = ['0.2']
names = [3]
main_list_alpha1 = []

for name in tqdm(names):
  dic = {}
  for intens in intensity:
    mainpath = path1 + str(name) + '/alpha/' + intens + '/'
    print('The folder is {}'.format(mainpath))
    list1 = os.listdir(mainpath)
    rmd_list = np.zeros((31,31,2607))
    for tabl in list1:
      for tabl2 in list1:
        if (tabl[-9:-4] == 'alpha' and tabl2[-9:-4] == 'alpha'):
          if (tabl[1] == '_'):
            ind1 = int(tabl[0])
          else:
            ind1 = int(tabl[0:2])
          if (tabl2[1] == '_'):
            ind2 = int(tabl2[0])
          else:
            ind2 = int(tabl2[0:2])
          if (ind1!=31 and ind2!=31):
            a1 = np.load(mainpath+tabl)
            a2 = np.load(mainpath+tabl2)
            RMD = RMD1(a1,a2)
            rmd_list[ind1,ind2] = RMD
    dic[intens] = rmd_list
  main_list_alpha1.append(dic)

import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['figure.dpi'] = 100
for i in range(len(main_list_alpha1)):
  mean_RMD_list = []
  for j in intensity:
    list1 =  main_list_alpha1[i][j]
    mean_RMD = np.mean(list1)
    mean_RMD_list.append(mean_RMD)
  title = "Participant "+ str(i+3) + " Alpha frequency region"
  plt_plot(mean_RMD_list,title)

def plt_plot(y,title1):
  plt.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], y)
  plt.xlabel('intensity') 
  plt.ylabel('Mean_RMD')
  plt.title(title1) 
  plt.show()

np.save('P3_alpha_0.2.npy' , rmd_list)

seq_list = []
for i in range(2608):
  seq_list.append(np.mean(rmd_list[:,:,i]))



plt.plot(np.linspace(0, 10, num = 2556), seq_list)
plt.xlabel('time s') 
plt.ylabel('Mean_RMD')
plt.title("Participant 4. Beta frequency region. Intensity 0.7 ") 
plt.show()

df = pd.read_csv("/content/filters/Participant2_Backgr_int_0.5_type_0.4filter_alpha.csv")

ind1 = '1'
ind2 = '8'

f1 = df[ind1][0:int(len(df)/6)]
f2 = df[ind2][0:int(len(df)/6)]

f1

result = pd.concat([f1, f2])
result = result.reset_index()
result = result.drop(columns = 'index')

from sklearn.model_selection import train_test_split

def RMD1(df,df1):
  n = len(df)
  RMD = np.log2(np.mean(df*df1)/(np.mean(df)*np.mean(df1)))
  return RMD

RMD1(f2,f1)

list_RMD = []
range1 = range(1000)

for i in tqdm(range1):
  a , b = train_test_split(result, test_size = 0.5)
  rpx1 = RecurrencePlot(np.array(a),threshold_std=0.03)
  rpx1 = rpx1.recurrence_matrix()
  rpx2 = RecurrencePlot(np.array(b),threshold_std=0.03)
  rpx2 = rpx2.recurrence_matrix()
  RMD = RMD1(rpx1,rpx2)
  list_RMD.append(RMD)

import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['figure.dpi'] = 150

plt.hist(list_RMD, bins=70,)
plt.show()

def monte_carlo2(x, tot_sample):
    gen_dist = np.random.noncentral_chisquare(df=1, nonc=x, size=(x.shape[0],tot_sample))
    compare = gen_dist > x
    return np.divide(np.sum(compare, axis=1), tot_sample)

(sum(list_RMD)/len(list_RMD))/RMD1(f2,f1)

sum(list_RMD - )/1000

len(result)/2